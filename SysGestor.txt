SysGestor
├── backend
│   ├── auth.js
│   ├── clientes.js
│   ├── database.js
│   ├── inventario.js
│   ├── reportes.js
│   ├── server.js
│   └── ventas.js
├── data
│   ├── clientes.json
│   ├── configuracion.json
│   ├── inventario.json
│   ├── productos.json
│   ├── usuarios.json
│   └── ventas.json
├── frontend
│   ├── consulta_inventario.html
│   ├── dashboard.html
│   ├── gestion_inventario.html
│   ├── gestion_usuarios.html
│   ├── historial_ventas.html
│   ├── index.html
│   ├── login.html
│   ├── registro_clientes.html
│   ├── registro_ventas.html
│   ├── reportes_graficos.html
│   └── seguimiento_clientes.html
├── It_Dir_Fil.py
├── SysGestor.bat
└── SysGestor.txt
------------------------------------
auth.js

const database = require('./database.js');

class Auth {
    async handleLogin(req, res) {
        try {
            const body = await getRequestBody(req);
            const { usuario, password } = JSON.parse(body);
            
            const usuarios = await database.leerArchivo('usuarios.json');
            const usuarioEncontrado = usuarios.find(u => u.usuario === usuario && u.password === password);
            
            if (usuarioEncontrado) {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    success: true, 
                    usuario: {
                        id: usuarioEncontrado.id,
                        nombre: usuarioEncontrado.nombre,
                        rol: usuarioEncontrado.rol
                    }
                }));
            } else {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: 'Credenciales incorrectas' }));
            }
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, error: 'Error en el servidor' }));
        }
    }
}

function getRequestBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            resolve(body);
        });
        req.on('error', reject);
    });
}

module.exports = new Auth();
------------------------------------
clientes.js

const database = require('./database.js');

class Clientes {
    async registrarCliente(req, res) {
        try {
            const body = await getRequestBody(req);
            const clienteData = JSON.parse(body);
            
            const clientes = await database.leerArchivo('clientes.json');
            
            const nuevoCliente = {
                id: await database.obtenerProximoId('clientes.json'),
                nombre: clienteData.nombre,
                email: clienteData.email,
                telefono: clienteData.telefono,
                direccion: clienteData.direccion,
                fecha_registro: new Date().toISOString()
            };
            
            clientes.push(nuevoCliente);
            await database.escribirArchivo('clientes.json', clientes);

            res.writeHead(201, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: true, cliente: nuevoCliente }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, error: 'Error al registrar cliente' }));
        }
    }

    async obtenerClientes(req, res) {
        try {
            const clientes = await database.leerArchivo('clientes.json');
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify(clientes));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error al obtener clientes' }));
        }
    }
}

function getRequestBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            resolve(body);
        });
        req.on('error', reject);
    });
}

module.exports = new Clientes();
------------------------------------
database.js

const fs = require('fs').promises;
const path = require('path');

const DATA_DIR = path.join(__dirname, '..', 'data');

class Database {
    async leerArchivo(archivo) {
        try {
            const filePath = path.join(DATA_DIR, archivo);
            const data = await fs.readFile(filePath, 'utf8');
            return JSON.parse(data);
        } catch (error) {
            // Si el archivo no existe, retornar array vacío
            if (error.code === 'ENOENT') {
                return [];
            }
            throw error;
        }
    }

    async escribirArchivo(archivo, datos) {
        const filePath = path.join(DATA_DIR, archivo);
        await fs.writeFile(filePath, JSON.stringify(datos, null, 2), 'utf8');
    }

    async obtenerProximoId(archivo) {
        const datos = await this.leerArchivo(archivo);
        if (datos.length === 0) return 1;
        return Math.max(...datos.map(item => item.id)) + 1;
    }
}

module.exports = new Database();
------------------------------------
inventario.js

const database = require('./database.js');

class Inventario {
    async obtenerInventario(req, res) {
        try {
            const inventario = await database.leerArchivo('inventario.json');
            const productos = await database.leerArchivo('productos.json');
            
            // Combinar información de productos con inventario
            const inventarioCompleto = inventario.map(item => {
                const producto = productos.find(p => p.id === item.producto_id);
                return {
                    ...item,
                    nombre: producto ? producto.nombre : 'Producto no encontrado',
                    categoria: producto ? producto.categoria : 'N/A'
                };
            });

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify(inventarioCompleto));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error al obtener inventario' }));
        }
    }

    async agregarProducto(req, res) {
        try {
            const body = await getRequestBody(req);
            const productoData = JSON.parse(body);
            
            const productos = await database.leerArchivo('productos.json');
            const nuevoId = await database.obtenerProximoId('productos.json');
            
            const nuevoProducto = {
                id: nuevoId,
                nombre: productoData.nombre,
                descripcion: productoData.descripcion,
                categoria: productoData.categoria,
                precio_compra: productoData.precio_compra,
                precio_venta: productoData.precio_venta,
                fecha_creacion: new Date().toISOString()
            };
            
            productos.push(nuevoProducto);
            await database.escribirArchivo('productos.json', productos);

            // Agregar al inventario
            const inventario = await database.leerArchivo('inventario.json');
            inventario.push({
                producto_id: nuevoId,
                cantidad: productoData.cantidad_inicial || 0,
                stock_minimo: productoData.stock_minimo || 10,
                ubicacion: productoData.ubicacion || 'Almacén'
            });
            
            await database.escribirArchivo('inventario.json', inventario);

            res.writeHead(201, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: true, producto: nuevoProducto }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, error: 'Error al agregar producto' }));
        }
    }

    async actualizarProducto(req, res) {
        try {
            const body = await getRequestBody(req);
            const updateData = JSON.parse(body);
            
            const productos = await database.leerArchivo('productos.json');
            const productoIndex = productos.findIndex(p => p.id === updateData.id);
            
            if (productoIndex === -1) {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: 'Producto no encontrado' }));
                return;
            }
            
            productos[productoIndex] = { ...productos[productoIndex], ...updateData };
            await database.escribirArchivo('productos.json', productos);

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: true, producto: productos[productoIndex] }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, error: 'Error al actualizar producto' }));
        }
    }
}

function getRequestBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            resolve(body);
        });
        req.on('error', reject);
    });
}

module.exports = new Inventario();
------------------------------------
reportes.js

const database = require('./database.js');

class Reportes {
    async obtenerReporteVentas(req, res) {
        try {
            const ventas = await database.leerArchivo('ventas.json');
            
            // Agrupar ventas por mes
            const ventasPorMes = {};
            ventas.forEach(venta => {
                const fecha = new Date(venta.fecha);
                const mes = `${fecha.getFullYear()}-${fecha.getMonth() + 1}`;
                
                if (!ventasPorMes[mes]) {
                    ventasPorMes[mes] = 0;
                }
                ventasPorMes[mes] += venta.total;
            });
            
            // Productos más vendidos
            const productosVendidos = {};
            ventas.forEach(venta => {
                venta.productos.forEach(producto => {
                    if (!productosVendidos[producto.producto_id]) {
                        productosVendidos[producto.producto_id] = 0;
                    }
                    productosVendidos[producto.producto_id] += producto.cantidad;
                });
            });

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
                ventasPorMes,
                productosVendidos,
                totalVentas: ventas.reduce((sum, venta) => sum + venta.total, 0),
                cantidadVentas: ventas.length
            }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error al generar reporte de ventas' }));
        }
    }

    async obtenerReporteInventario(req, res) {
        try {
            const inventario = await database.leerArchivo('inventario.json');
            const productos = await database.leerArchivo('productos.json');
            
            const productosBajoStock = inventario.filter(item => item.cantidad <= item.stock_minimo);
            const valorTotalInventario = inventario.reduce((sum, item) => {
                const producto = productos.find(p => p.id === item.producto_id);
                return sum + (item.cantidad * (producto ? producto.precio_compra : 0));
            }, 0);

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
                productosBajoStock: productosBajoStock.map(item => {
                    const producto = productos.find(p => p.id === item.producto_id);
                    return {
                        ...item,
                        nombre: producto ? producto.nombre : 'N/A'
                    };
                }),
                valorTotalInventario,
                totalProductos: inventario.length,
                productosActivos: inventario.filter(item => item.cantidad > 0).length
            }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error al generar reporte de inventario' }));
        }
    }
}

module.exports = new Reportes();
------------------------------------
server.js

const http = require('http');
const url = require('url');
const fs = require('fs');
const path = require('path');

// Importar módulos
const auth = require('./auth.js');
const database = require('./database.js');
const inventario = require('./inventario.js');
const ventas = require('./ventas.js');
const clientes = require('./clientes.js');
const reportes = require('./reportes.js');

const PORT = 3000;

const server = http.createServer(async (req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    const method = req.method;

    // Configurar CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    // Servir archivos estáticos del frontend
    if (method === 'GET' && pathname.startsWith('/frontend/')) {
        const filePath = path.join(__dirname, '..', pathname);
        serveStaticFile(res, filePath);
        return;
    }

    // Rutas de la API
    try {
        if (pathname === '/api/login' && method === 'POST') {
            await auth.handleLogin(req, res);
        }
        else if (pathname === '/api/inventario' && method === 'GET') {
            await inventario.obtenerInventario(req, res);
        }
        else if (pathname === '/api/inventario' && method === 'POST') {
            await inventario.agregarProducto(req, res);
        }
        else if (pathname === '/api/inventario' && method === 'PUT') {
            await inventario.actualizarProducto(req, res);
        }
        else if (pathname === '/api/ventas' && method === 'POST') {
            await ventas.registrarVenta(req, res);
        }
        else if (pathname === '/api/ventas' && method === 'GET') {
            await ventas.obtenerVentas(req, res);
        }
        else if (pathname === '/api/clientes' && method === 'POST') {
            await clientes.registrarCliente(req, res);
        }
        else if (pathname === '/api/clientes' && method === 'GET') {
            await clientes.obtenerClientes(req, res);
        }
        else if (pathname === '/api/reportes/ventas' && method === 'GET') {
            await reportes.obtenerReporteVentas(req, res);
        }
        else if (pathname === '/api/reportes/inventario' && method === 'GET') {
            await reportes.obtenerReporteInventario(req, res);
        }
        else {
            res.writeHead(404, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Ruta no encontrada' }));
        }
    } catch (error) {
        console.error('Error en el servidor:', error);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Error interno del servidor' }));
    }
});

function serveStaticFile(res, filePath) {
    const extname = path.extname(filePath);
    const contentType = getContentType(extname);

    fs.readFile(filePath, (err, data) => {
        if (err) {
            res.writeHead(404);
            res.end('Archivo no encontrado');
            return;
        }
        
        res.writeHead(200, { 'Content-Type': contentType });
        res.end(data);
    });
}

function getContentType(extname) {
    const types = {
        '.html': 'text/html',
        '.css': 'text/css',
        '.js': 'text/javascript',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpeg'
    };
    return types[extname] || 'text/plain';
}

server.listen(PORT, () => {
    console.log(`Servidor SysGestor ejecutándose en http://localhost:${PORT}`);
    console.log(`Accede a la aplicación desde: http://localhost:${PORT}/frontend/login.html`);
});

// Cerrar servidor correctamente
process.on('SIGINT', () => {
    console.log('\nCerrando servidor...');
    process.exit(0);
});
------------------------------------
ventas.js

const database = require('./database.js');

class Ventas {
    async registrarVenta(req, res) {
        try {
            const body = await getRequestBody(req);
            const ventaData = JSON.parse(body);
            
            const ventas = await database.leerArchivo('ventas.json');
            const inventario = await database.leerArchivo('inventario.json');
            
            const nuevaVenta = {
                id: await database.obtenerProximoId('ventas.json'),
                cliente_id: ventaData.cliente_id,
                productos: ventaData.productos,
                total: ventaData.total,
                fecha: new Date().toISOString(),
                estado: 'completada'
            };
            
            // Actualizar inventario
            for (const productoVenta of ventaData.productos) {
                const inventarioIndex = inventario.findIndex(item => item.producto_id === productoVenta.producto_id);
                if (inventarioIndex !== -1) {
                    inventario[inventarioIndex].cantidad -= productoVenta.cantidad;
                }
            }
            
            ventas.push(nuevaVenta);
            await database.escribirArchivo('ventas.json', ventas);
            await database.escribirArchivo('inventario.json', inventario);

            res.writeHead(201, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: true, venta: nuevaVenta }));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: false, error: 'Error al registrar venta' }));
        }
    }

    async obtenerVentas(req, res) {
        try {
            const ventas = await database.leerArchivo('ventas.json');
            const clientes = await database.leerArchivo('clientes.json');
            const productos = await database.leerArchivo('productos.json');
            
            const ventasCompletas = ventas.map(venta => {
                const cliente = clientes.find(c => c.id === venta.cliente_id);
                const productosCompletos = venta.productos.map(pv => {
                    const producto = productos.find(p => p.id === pv.producto_id);
                    return {
                        ...pv,
                        nombre: producto ? producto.nombre : 'Producto no encontrado',
                        precio_unitario: producto ? producto.precio_venta : 0
                    };
                });
                
                return {
                    ...venta,
                    cliente_nombre: cliente ? cliente.nombre : 'Cliente no encontrado',
                    productos: productosCompletos
                };
            });

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify(ventasCompletas));
        } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Error al obtener ventas' }));
        }
    }
}

function getRequestBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            resolve(body);
        });
        req.on('error', reject);
    });
}

module.exports = new Ventas();
------------------------------------
clientes.json

[
  {
    "id": 1,
    "nombre": "Empresa ABC Solutions",
    "email": "contacto@abcsolutions.com",
    "telefono": "6641234567",
    "direccion": "Av. Principal 123, Tijuana, BC",
    "fecha_registro": "2025-01-10T09:00:00.000Z"
  },
  {
    "id": 2,
    "nombre": "Tecnología Avanzada SA",
    "email": "compras@tecnologiaavanzada.com",
    "telefono": "6649876543",
    "direccion": "Blvd. Industrial 456, Tijuana, BC",
    "fecha_registro": "2025-01-12T11:30:00.000Z"
  }
]
------------------------------------
configuracion.json

{
  "empresa": {
    "nombre": "Compustar TechStore",
    "slogan": "Soluciones que conectan",
    "telefono": "664-123-4567",
    "email": "info@compustar.com",
    "direccion": "Plaza Alameda, Otay, Tijuana, B.C."
  },
  "sistema": {
    "version": "1.0.0",
    "moneda": "MXN",
    "iva": 0.16
  }
}
------------------------------------
inventario.json

[
  {
    "producto_id": 1,
    "cantidad": 5,
    "stock_minimo": 2,
    "ubicacion": "Almacén A"
  },
  {
    "producto_id": 2,
    "cantidad": 25,
    "stock_minimo": 10,
    "ubicacion": "Almacén B"
  },
  {
    "producto_id": 3,
    "cantidad": 8,
    "stock_minimo": 5,
    "ubicacion": "Almacén A"
  }
]
------------------------------------
productos.json

[
  {
    "id": 1,
    "nombre": "Laptop Dell Inspiron 15",
    "descripcion": "Laptop 15 pulgadas, 8GB RAM, 256GB SSD",
    "categoria": "Computadoras",
    "precio_compra": 8500,
    "precio_venta": 12000,
    "fecha_creacion": "2025-01-15T10:30:00.000Z"
  },
  {
    "id": 2,
    "nombre": "Mouse Inalámbrico Logitech",
    "descripcion": "Mouse óptico inalámbrico, 2.4GHz",
    "categoria": "Periféricos",
    "precio_compra": 150,
    "precio_venta": 300,
    "fecha_creacion": "2025-01-15T10:35:00.000Z"
  },
  {
    "id": 3,
    "nombre": "Teclado Mecánico RGB",
    "descripcion": "Teclado mecánico gaming con retroiluminación RGB",
    "categoria": "Periféricos",
    "precio_compra": 400,
    "precio_venta": 800,
    "fecha_creacion": "2025-01-15T10:40:00.000Z"
  }
]
------------------------------------
usuarios.json

[
  {
    "id": 1,
    "usuario": "admin",
    "password": "admin123",
    "nombre": "Administrador",
    "rol": "admin",
    "email": "admin@compustar.com",
    "fecha_creacion": "2025-01-01T00:00:00.000Z"
  },
  {
    "id": 2,
    "usuario": "ventas",
    "password": "ventas123",
    "nombre": "Juan Pérez",
    "rol": "ventas",
    "email": "ventas@compustar.com",
    "fecha_creacion": "2025-01-01T00:00:00.000Z"
  },
  {
    "id": 3,
    "usuario": "inventario",
    "password": "inv123",
    "nombre": "María García",
    "rol": "inventario",
    "email": "inventario@compustar.com",
    "fecha_creacion": "2025-01-01T00:00:00.000Z"
  }
]
------------------------------------
ventas.json

[
  {
    "id": 1,
    "cliente_id": 1,
    "productos": [
      {
        "producto_id": 2,
        "cantidad": 2,
        "precio": 300
      }
    ],
    "total": 600,
    "fecha": "2025-01-20T14:30:00.000Z",
    "estado": "completada"
  },
  {
    "id": 2,
    "cliente_id": 2,
    "productos": [
      {
        "producto_id": 1,
        "cantidad": 1,
        "precio": 12000
      },
      {
        "producto_id": 3,
        "cantidad": 1,
        "precio": 800
      }
    ],
    "total": 12800,
    "fecha": "2025-01-21T16:45:00.000Z",
    "estado": "completada"
  }
]
------------------------------------
consulta_inventario.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Consulta de Inventario</title>
    <style>
        /* Estilos similares a gestion_inventario.html por consistencia */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .filters {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .inventory-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .low-stock {
            background: #fff3cd;
            color: #856404;
            padding: 0.3rem 0.6rem;
            border-radius: 3px;
            font-size: 12px;
        }

        .out-of-stock {
            background: #f8d7da;
            color: #721c24;
            padding: 0.3rem 0.6rem;
            border-radius: 3px;
            font-size: 12px;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Consulta de Inventario</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Consulta y Análisis de Inventario</h1>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalProductos">0</div>
                <div class="stat-label">Total Productos</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="valorInventario">$0</div>
                <div class="stat-label">Valor Total Inventario</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="alertasStock">0</div>
                <div class="stat-label">Alertas de Stock</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="productosActivos">0</div>
                <div class="stat-label">Productos Activos</div>
            </div>
        </div>

        <div class="filters">
            <div class="filter-grid">
                <div class="form-group">
                    <label for="search">Buscar Producto:</label>
                    <input type="text" id="search" placeholder="Nombre o categoría...">
                </div>
                <div class="form-group">
                    <label for="categoriaFilter">Filtrar por Categoría:</label>
                    <select id="categoriaFilter">
                        <option value="">Todas las categorías</option>
                        <option value="Computadoras">Computadoras</option>
                        <option value="Periféricos">Periféricos</option>
                        <option value="Componentes">Componentes</option>
                        <option value="Redes">Redes</option>
                        <option value="Software">Software</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stockFilter">Filtrar por Stock:</label>
                    <select id="stockFilter">
                        <option value="">Todo el stock</option>
                        <option value="low">Stock Bajo</option>
                        <option value="out">Sin Stock</option>
                        <option value="normal">Stock Normal</option>
                    </select>
                </div>
                <div class="form-group">
                    <button class="btn" onclick="applyFilters()">Aplicar Filtros</button>
                </div>
            </div>
        </div>

        <div class="inventory-section">
            <h2>Inventario Actual</h2>
            <table id="inventoryTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Categoría</th>
                        <th>Precio Compra</th>
                        <th>Precio Venta</th>
                        <th>Stock Actual</th>
                        <th>Stock Mínimo</th>
                        <th>Valor en Inventario</th>
                        <th>Estado</th>
                        <th>Ubicación</th>
                    </tr>
                </thead>
                <tbody id="inventoryBody">
                    <!-- Los productos se cargarán dinámicamente -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        let inventoryData = [];

        // Cargar inventario
        async function loadInventory() {
            try {
                const response = await fetch('http://localhost:3000/api/inventario');
                inventoryData = await response.json();
                applyFilters();
                updateStats();
            } catch (error) {
                console.error('Error cargando inventario:', error);
            }
        }

        function applyFilters() {
            const searchTerm = document.getElementById('search').value.toLowerCase();
            const categoria = document.getElementById('categoriaFilter').value;
            const stockFilter = document.getElementById('stockFilter').value;

            let filteredData = inventoryData.filter(item => {
                const matchesSearch = item.nombre.toLowerCase().includes(searchTerm) || 
                                    item.categoria.toLowerCase().includes(searchTerm);
                const matchesCategoria = !categoria || item.categoria === categoria;
                const matchesStock = 
                    !stockFilter ||
                    (stockFilter === 'low' && item.cantidad <= item.stock_minimo && item.cantidad > 0) ||
                    (stockFilter === 'out' && item.cantidad === 0) ||
                    (stockFilter === 'normal' && item.cantidad > item.stock_minimo);

                return matchesSearch && matchesCategoria && matchesStock;
            });

            displayInventory(filteredData);
        }

        function displayInventory(data) {
            const tbody = document.getElementById('inventoryBody');
            tbody.innerHTML = data.map(item => {
                const valorInventario = (item.cantidad * (item.precio_compra || 0));
                let estado = '';
                
                if (item.cantidad === 0) {
                    estado = '<span class="out-of-stock">Sin Stock</span>';
                } else if (item.cantidad <= item.stock_minimo) {
                    estado = '<span class="low-stock">Stock Bajo</span>';
                } else {
                    estado = '<span style="color: green;">✓ Normal</span>';
                }

                return `
                    <tr>
                        <td>${item.producto_id}</td>
                        <td>${item.nombre}</td>
                        <td>${item.categoria}</td>
                        <td>$${item.precio_compra?.toLocaleString() || 'N/A'}</td>
                        <td>$${item.precio_venta?.toLocaleString() || 'N/A'}</td>
                        <td>${item.cantidad}</td>
                        <td>${item.stock_minimo}</td>
                        <td>$${valorInventario.toLocaleString()}</td>
                        <td>${estado}</td>
                        <td>${item.ubicacion}</td>
                    </tr>
                `;
            }).join('');
        }

        function updateStats() {
            const totalProductos = inventoryData.length;
            const valorInventario = inventoryData.reduce((sum, item) => 
                sum + (item.cantidad * (item.precio_compra || 0)), 0);
            const alertasStock = inventoryData.filter(item => 
                item.cantidad <= item.stock_minimo && item.cantidad > 0).length;
            const productosActivos = inventoryData.filter(item => item.cantidad > 0).length;

            document.getElementById('totalProductos').textContent = totalProductos;
            document.getElementById('valorInventario').textContent = `$${valorInventario.toLocaleString()}`;
            document.getElementById('alertasStock').textContent = alertasStock;
            document.getElementById('productosActivos').textContent = productosActivos;
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Event listeners para filtros en tiempo real
        document.getElementById('search').addEventListener('input', applyFilters);
        document.getElementById('categoriaFilter').addEventListener('change', applyFilters);
        document.getElementById('stockFilter').addEventListener('change', applyFilters);

        // Cargar inventario al iniciar
        document.addEventListener('DOMContentLoaded', loadInventory);
    </script>
</body>
</html>
------------------------------------
dashboard.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Reportes y Gráficos</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .reports-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .report-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .report-card h2 {
            margin-bottom: 1rem;
            color: #333;
            border-bottom: 2px solid #667eea;
            padding-bottom: 0.5rem;
        }

        .chart-container {
            height: 300px;
            margin-top: 1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .alerts-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .alert-item {
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .alert-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }

        .alert-danger {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .table th, .table td {
            padding: 0.8rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background: #f8f9fa;
            font-weight: 600;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Reportes y Gráficos</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Reportes y Análisis de Negocio</h1>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalVentas">0</div>
                <div class="stat-label">Ventas Totales</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="ingresosTotales">$0</div>
                <div class="stat-label">Ingresos Totales</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalClientes">0</div>
                <div class="stat-label">Clientes Registrados</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="productosInventario">0</div>
                <div class="stat-label">Productos en Inventario</div>
            </div>
        </div>

        <div class="reports-grid">
            <div class="report-card">
                <h2>Ventas por Mes</h2>
                <div class="chart-container">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>

            <div class="report-card">
                <h2>Productos Más Vendidos</h2>
                <div class="chart-container">
                    <canvas id="productsChart"></canvas>
                </div>
            </div>

            <div class="report-card">
                <h2>Estado del Inventario</h2>
                <div class="chart-container">
                    <canvas id="inventoryChart"></canvas>
                </div>
            </div>

            <div class="report-card">
                <h2>Distribución por Categorías</h2>
                <div class="chart-container">
                    <canvas id="categoriesChart"></canvas>
                </div>
            </div>
        </div>

        <div class="alerts-section">
            <h2>Alertas y Recomendaciones</h2>
            <div id="alertsContainer">
                <!-- Las alertas se cargarán dinámicamente -->
            </div>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        let salesData = [];
        let inventoryData = [];

        // Cargar datos iniciales
        async function loadInitialData() {
            await loadSalesData();
            await loadInventoryData();
            updateCharts();
            updateStats();
            generateAlerts();
        }

        // Cargar datos de ventas
        async function loadSalesData() {
            try {
                const response = await fetch('http://localhost:3000/api/reportes/ventas');
                const data = await response.json();
                salesData = data;
            } catch (error) {
                console.error('Error cargando datos de ventas:', error);
            }
        }

        // Cargar datos de inventario
        async function loadInventoryData() {
            try {
                const response = await fetch('http://localhost:3000/api/reportes/inventario');
                const data = await response.json();
                inventoryData = data;
            } catch (error) {
                console.error('Error cargando datos de inventario:', error);
            }
        }

        // Actualizar gráficos
        function updateCharts() {
            updateSalesChart();
            updateProductsChart();
            updateInventoryChart();
            updateCategoriesChart();
        }

        // Gráfico de ventas por mes
        function updateSalesChart() {
            const ctx = document.getElementById('salesChart').getContext('2d');
            const months = Object.keys(salesData.ventasPorMes || {});
            const amounts = Object.values(salesData.ventasPorMes || {});

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Ventas por Mes',
                        data: amounts,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 2,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Gráfico de productos más vendidos
        function updateProductsChart() {
            const ctx = document.getElementById('productsChart').getContext('2d');
            // Usar datos de ejemplo por ahora
            const products = ['Laptop Dell', 'Mouse Logitech', 'Teclado Mecánico'];
            const sales = [15, 25, 8];

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: products,
                    datasets: [{
                        label: 'Unidades Vendidas',
                        data: sales,
                        backgroundColor: [
                            '#ff6b6b',
                            '#4ecdc4',
                            '#45b7d1'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Gráfico de estado del inventario
        function updateInventoryChart() {
            const ctx = document.getElementById('inventoryChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Stock Normal', 'Stock Bajo', 'Sin Stock'],
                    datasets: [{
                        data: [inventoryData.productosActivos || 0, 
                               inventoryData.productosBajoStock?.length || 0, 
                               0], // Sin stock calculado
                        backgroundColor: [
                            '#2ecc71',
                            '#f39c12',
                            '#e74c3c'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Gráfico de categorías
        function updateCategoriesChart() {
            const ctx = document.getElementById('categoriesChart').getContext('2d');
            
            // Datos de ejemplo por categorías
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Computadoras', 'Periféricos', 'Componentes', 'Redes'],
                    datasets: [{
                        data: [30, 25, 20, 15],
                        backgroundColor: [
                            '#3498db',
                            '#9b59b6',
                            '#e74c3c',
                            '#f1c40f'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Actualizar estadísticas
        function updateStats() {
            document.getElementById('totalVentas').textContent = salesData.cantidadVentas || 0;
            document.getElementById('ingresosTotales').textContent = `$${(salesData.totalVentas || 0).toLocaleString()}`;
            document.getElementById('totalClientes').textContent = '2'; // Datos de ejemplo
            document.getElementById('productosInventario').textContent = inventoryData.totalProductos || 0;
        }

        // Generar alertas
        function generateAlerts() {
            const alertsContainer = document.getElementById('alertsContainer');
            const alerts = [];

            // Alertas de stock bajo
            if (inventoryData.productosBajoStock && inventoryData.productosBajoStock.length > 0) {
                alerts.push(`
                    <div class="alert-item alert-warning">
                        <span>${inventoryData.productosBajoStock.length} productos con stock bajo</span>
                        <button class="btn btn-secondary" onclick="viewLowStock()">Ver Detalles</button>
                    </div>
                `);
            }

            // Alertas de ventas (ejemplo)
            if ((salesData.totalVentas || 0) < 10000) {
                alerts.push(`
                    <div class="alert-item alert-warning">
                        <span>Ventas del mes por debajo del objetivo</span>
                        <button class="btn btn-secondary" onclick="viewSalesReport()">Ver Reporte</button>
                    </div>
                `);
            }

            // Alertas de clientes (ejemplo)
            alerts.push(`
                <div class="alert-item alert-warning">
                    <span>3 clientes no han realizado compras en más de 30 días</span>
                    <button class="btn btn-secondary" onclick="viewClientFollowup()">Seguimiento</button>
                </div>
            `);

            alertsContainer.innerHTML = alerts.join('') || '<p>No hay alertas en este momento.</p>';
        }

        function viewLowStock() {
            window.location.href = 'consulta_inventario.html';
        }

        function viewSalesReport() {
            window.location.href = 'historial_ventas.html';
        }

        function viewClientFollowup() {
            window.location.href = 'seguimiento_clientes.html';
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos al iniciar
        document.addEventListener('DOMContentLoaded', loadInitialData);
    </script>
</body>
</html>
------------------------------------
gestion_inventario.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Gestión de Inventario</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .form-section, .list-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-edit, .btn-delete {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .btn-edit {
            background: #3498db;
            color: white;
        }

        .btn-delete {
            background: #e74c3c;
            color: white;
        }

        .low-stock {
            background: #fff3cd;
            color: #856404;
            padding: 0.3rem 0.6rem;
            border-radius: 3px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Gestión de Inventario</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Gestión de Productos e Inventario</h1>

        <div class="form-section">
            <h2>Agregar Nuevo Producto</h2>
            <form id="productForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="nombre">Nombre del Producto:</label>
                        <input type="text" id="nombre" name="nombre" required>
                    </div>
                    <div class="form-group">
                        <label for="categoria">Categoría:</label>
                        <select id="categoria" name="categoria" required>
                            <option value="">Seleccionar categoría</option>
                            <option value="Computadoras">Computadoras</option>
                            <option value="Periféricos">Periféricos</option>
                            <option value="Componentes">Componentes</option>
                            <option value="Redes">Redes</option>
                            <option value="Software">Software</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="precio_compra">Precio de Compra:</label>
                        <input type="number" id="precio_compra" name="precio_compra" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="precio_venta">Precio de Venta:</label>
                        <input type="number" id="precio_venta" name="precio_venta" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="cantidad_inicial">Cantidad Inicial:</label>
                        <input type="number" id="cantidad_inicial" name="cantidad_inicial" required>
                    </div>
                    <div class="form-group">
                        <label for="stock_minimo">Stock Mínimo:</label>
                        <input type="number" id="stock_minimo" name="stock_minimo" value="10" required>
                    </div>
                    <div class="form-group">
                        <label for="ubicacion">Ubicación en Almacén:</label>
                        <input type="text" id="ubicacion" name="ubicacion" value="Almacén A">
                    </div>
                </div>
                <div class="form-group">
                    <label for="descripcion">Descripción:</label>
                    <input type="text" id="descripcion" name="descripcion" required>
                </div>
                <button type="submit" class="btn">Agregar Producto</button>
            </form>
        </div>

        <div class="list-section">
            <h2>Productos en Inventario</h2>
            <table id="inventoryTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Categoría</th>
                        <th>Precio Compra</th>
                        <th>Precio Venta</th>
                        <th>Stock</th>
                        <th>Stock Mínimo</th>
                        <th>Ubicación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="inventoryBody">
                    <!-- Los productos se cargarán dinámicamente -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        // Cargar inventario
        async function loadInventory() {
            try {
                const response = await fetch('http://localhost:3000/api/inventario');
                const inventario = await response.json();
                
                const tbody = document.getElementById('inventoryBody');
                tbody.innerHTML = inventario.map(item => `
                    <tr>
                        <td>${item.producto_id}</td>
                        <td>${item.nombre}</td>
                        <td>${item.categoria}</td>
                        <td>$${item.precio_compra?.toLocaleString() || 'N/A'}</td>
                        <td>$${item.precio_venta?.toLocaleString() || 'N/A'}</td>
                        <td>
                            ${item.cantidad}
                            ${item.cantidad <= item.stock_minimo ? '<span class="low-stock">Stock Bajo</span>' : ''}
                        </td>
                        <td>${item.stock_minimo}</td>
                        <td>${item.ubicacion}</td>
                        <td class="actions">
                            <button class="btn-edit" onclick="editProduct(${item.producto_id})">Editar</button>
                            <button class="btn-delete" onclick="deleteProduct(${item.producto_id})">Eliminar</button>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error cargando inventario:', error);
            }
        }

        // Agregar nuevo producto
        document.getElementById('productForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const productData = {
                nombre: formData.get('nombre'),
                descripcion: formData.get('descripcion'),
                categoria: formData.get('categoria'),
                precio_compra: parseFloat(formData.get('precio_compra')),
                precio_venta: parseFloat(formData.get('precio_venta')),
                cantidad_inicial: parseInt(formData.get('cantidad_inicial')),
                stock_minimo: parseInt(formData.get('stock_minimo')),
                ubicacion: formData.get('ubicacion')
            };

            try {
                const response = await fetch('http://localhost:3000/api/inventario', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(productData)
                });

                const result = await response.json();
                
                if (result.success) {
                    alert('Producto agregado exitosamente');
                    this.reset();
                    loadInventory();
                } else {
                    alert('Error al agregar producto: ' + result.error);
                }
            } catch (error) {
                alert('Error de conexión');
            }
        });

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        function editProduct(id) {
            alert('Editar producto ' + id + ' - Funcionalidad en desarrollo');
        }

        function deleteProduct(id) {
            if (confirm('¿Estás seguro de eliminar este producto?')) {
                alert('Eliminar producto ' + id + ' - Funcionalidad en desarrollo');
            }
        }

        // Cargar inventario al iniciar
        document.addEventListener('DOMContentLoaded', loadInventory);
    </script>
</body>
</html>
------------------------------------
gestion_usuarios.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Gestión de Usuarios</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1000px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .admin-only {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 2rem;
            text-align: center;
        }

        .form-section, .list-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-danger {
            background: #e74c3c;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-edit, .btn-delete {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .btn-edit {
            background: #3498db;
            color: white;
        }

        .btn-delete {
            background: #e74c3c;
            color: white;
        }

        .role-admin { color: #e74c3c; font-weight: bold; }
        .role-ventas { color: #3498db; font-weight: bold; }
        .role-inventario { color: #f39c12; font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Gestión de Usuarios</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Gestión de Usuarios del Sistema</h1>

        <div id="adminMessage" class="admin-only" style="display: none;">
            ⚠️ Esta sección solo está disponible para usuarios administradores.
        </div>

        <div id="adminContent" style="display: none;">
            <div class="form-section">
                <h2>Registrar Nuevo Usuario</h2>
                <form id="userForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nombre">Nombre Completo:</label>
                            <input type="text" id="nombre" name="nombre" required>
                        </div>
                        <div class="form-group">
                            <label for="usuario">Usuario:</label>
                            <input type="text" id="usuario" name="usuario" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="password">Contraseña:</label>
                            <input type="password" id="password" name="password" required>
                        </div>
                        <div class="form-group">
                            <label for="rol">Rol:</label>
                            <select id="rol" name="rol" required>
                                <option value="">Seleccionar rol</option>
                                <option value="admin">Administrador</option>
                                <option value="ventas">Ventas</option>
                                <option value="inventario">Inventario</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn">Registrar Usuario</button>
                </form>
            </div>

            <div class="list-section">
                <h2>Usuarios del Sistema</h2>
                <table id="usersTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Usuario</th>
                            <th>Email</th>
                            <th>Rol</th>
                            <th>Fecha Creación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="usersBody">
                        <!-- Los usuarios se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // Verificar sesión y permisos
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
            
            // Mostrar contenido solo si es administrador
            if (usuario.rol === 'admin') {
                document.getElementById('adminContent').style.display = 'block';
                loadUsers();
            } else {
                document.getElementById('adminMessage').style.display = 'block';
            }
        }

        // Cargar usuarios
        async function loadUsers() {
            try {
                const response = await fetch('../data/usuarios.json');
                const users = await response.json();
                
                const tbody = document.getElementById('usersBody');
                tbody.innerHTML = users.map(user => `
                    <tr>
                        <td>${user.id}</td>
                        <td>${user.nombre}</td>
                        <td>${user.usuario}</td>
                        <td>${user.email}</td>
                        <td class="role-${user.rol}">${user.rol}</td>
                        <td>${new Date(user.fecha_creacion).toLocaleDateString()}</td>
                        <td class="actions">
                            <button class="btn-edit" onclick="editUser(${user.id})">Editar</button>
                            ${user.id !== usuario.id ? 
                                `<button class="btn-delete" onclick="deleteUser(${user.id})">Eliminar</button>` : 
                                '<span style="color: #666;">Actual</span>'
                            }
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error cargando usuarios:', error);
            }
        }

        // Registrar nuevo usuario
        document.getElementById('userForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const userData = {
                nombre: formData.get('nombre'),
                usuario: formData.get('usuario'),
                email: formData.get('email'),
                password: formData.get('password'),
                rol: formData.get('rol')
            };

            try {
                // En un sistema real, aquí se haría una petición al backend
                // Por ahora, solo simulamos la funcionalidad
                alert('Funcionalidad de registro de usuarios en desarrollo. En un sistema real, esto guardaría en el backend.');
                
                // Limpiar formulario
                this.reset();
                
            } catch (error) {
                alert('Error de conexión');
            }
        });

        function editUser(id) {
            alert('Editar usuario ' + id + ' - Funcionalidad en desarrollo');
        }

        function deleteUser(id) {
            if (confirm('¿Estás seguro de eliminar este usuario?')) {
                alert('Eliminar usuario ' + id + ' - Funcionalidad en desarrollo');
            }
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }
    </script>
</body>
</html>
------------------------------------
historial_ventas.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Historial de Ventas</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .filters {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .sales-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .sale-details {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 5px;
            margin-top: 0.5rem;
        }

        .product-item {
            display: flex;
            justify-content: space-between;
            padding: 0.3rem 0;
            border-bottom: 1px solid #eee;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Historial de Ventas</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Historial y Análisis de Ventas</h1>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalVentas">0</div>
                <div class="stat-label">Total Ventas</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="ingresosTotales">$0</div>
                <div class="stat-label">Ingresos Totales</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="ventasMes">0</div>
                <div class="stat-label">Ventas Este Mes</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="promedioVenta">$0</div>
                <div class="stat-label">Ticket Promedio</div>
            </div>
        </div>

        <div class="filters">
            <div class="filter-grid">
                <div class="form-group">
                    <label for="fechaInicio">Fecha Inicio:</label>
                    <input type="date" id="fechaInicio">
                </div>
                <div class="form-group">
                    <label for="fechaFin">Fecha Fin:</label>
                    <input type="date" id="fechaFin">
                </div>
                <div class="form-group">
                    <label for="clienteFilter">Filtrar por Cliente:</label>
                    <select id="clienteFilter">
                        <option value="">Todos los clientes</option>
                    </select>
                </div>
                <div class="form-group">
                    <button class="btn" onclick="applyFilters()">Aplicar Filtros</button>
                    <button class="btn btn-secondary" onclick="clearFilters()" style="margin-top: 0.5rem;">Limpiar Filtros</button>
                </div>
            </div>
        </div>

        <div class="sales-section">
            <h2>Historial de Ventas</h2>
            <table id="salesTable">
                <thead>
                    <tr>
                        <th>ID Venta</th>
                        <th>Fecha</th>
                        <th>Cliente</th>
                        <th>Productos</th>
                        <th>Total</th>
                        <th>Estado</th>
                    </tr>
                </thead>
                <tbody id="salesBody">
                    <!-- Las ventas se cargarán dinámicamente -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        let salesData = [];
        let clients = [];

        // Cargar datos iniciales
        async function loadInitialData() {
            await loadSales();
            await loadClients();
        }

        // Cargar ventas
        async function loadSales() {
            try {
                const response = await fetch('http://localhost:3000/api/ventas');
                salesData = await response.json();
                applyFilters();
                updateStats();
            } catch (error) {
                console.error('Error cargando ventas:', error);
            }
        }

        // Cargar clientes
        async function loadClients() {
            try {
                const response = await fetch('http://localhost:3000/api/clientes');
                clients = await response.json();
                const clienteFilter = document.getElementById('clienteFilter');
                clienteFilter.innerHTML = '<option value="">Todos los clientes</option>' +
                    clients.map(client => 
                        `<option value="${client.id}">${client.nombre}</option>`
                    ).join('');
            } catch (error) {
                console.error('Error cargando clientes:', error);
            }
        }

        function applyFilters() {
            const fechaInicio = document.getElementById('fechaInicio').value;
            const fechaFin = document.getElementById('fechaFin').value;
            const clienteId = document.getElementById('clienteFilter').value;

            let filteredData = salesData.filter(sale => {
                const saleDate = new Date(sale.fecha);
                const matchesFecha = 
                    (!fechaInicio || saleDate >= new Date(fechaInicio)) &&
                    (!fechaFin || saleDate <= new Date(fechaFin + 'T23:59:59'));
                const matchesCliente = !clienteId || sale.cliente_id == clienteId;

                return matchesFecha && matchesCliente;
            });

            displaySales(filteredData);
        }

        function clearFilters() {
            document.getElementById('fechaInicio').value = '';
            document.getElementById('fechaFin').value = '';
            document.getElementById('clienteFilter').value = '';
            applyFilters();
        }

        function displaySales(data) {
            const salesBody = document.getElementById('salesBody');
            salesBody.innerHTML = data.map(sale => `
                <tr>
                    <td>${sale.id}</td>
                    <td>${new Date(sale.fecha).toLocaleDateString()}</td>
                    <td>${sale.cliente_nombre}</td>
                    <td>
                        <button onclick="toggleDetails(${sale.id})">Ver Productos</button>
                        <div id="details-${sale.id}" class="sale-details" style="display: none;">
                            ${sale.productos.map(product => `
                                <div class="product-item">
                                    <span>${product.nombre}</span>
                                    <span>${product.cantidad} x $${product.precio_unitario?.toLocaleString() || product.precio?.toLocaleString() || '0'}</span>
                                    <span>$${(product.cantidad * (product.precio_unitario || product.precio || 0)).toLocaleString()}</span>
                                </div>
                            `).join('')}
                        </div>
                    </td>
                    <td>$${sale.total.toLocaleString()}</td>
                    <td><span style="color: green;">${sale.estado}</span></td>
                </tr>
            `).join('');
        }

        function toggleDetails(saleId) {
            const details = document.getElementById(`details-${saleId}`);
            details.style.display = details.style.display === 'none' ? 'block' : 'none';
        }

        function updateStats() {
            const totalVentas = salesData.length;
            const ingresosTotales = salesData.reduce((sum, sale) => sum + sale.total, 0);
            const mesActual = new Date().getMonth();
            const ventasMes = salesData.filter(sale => 
                new Date(sale.fecha).getMonth() === mesActual).length;
            const promedioVenta = totalVentas > 0 ? ingresosTotales / totalVentas : 0;

            document.getElementById('totalVentas').textContent = totalVentas;
            document.getElementById('ingresosTotales').textContent = `$${ingresosTotales.toLocaleString()}`;
            document.getElementById('ventasMes').textContent = ventasMes;
            document.getElementById('promedioVenta').textContent = `$${promedioVenta.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`;
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos al iniciar
        document.addEventListener('DOMContentLoaded', loadInitialData);
    </script>
</body>
</html>
------------------------------------
index.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .logo h1 {
            font-size: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .nav-sidebar {
            background: white;
            width: 250px;
            height: calc(100vh - 70px);
            position: fixed;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .nav-menu {
            list-style: none;
            padding: 1rem 0;
        }

        .nav-item {
            padding: 0.8rem 1.5rem;
            border-left: 4px solid transparent;
            transition: all 0.3s;
            cursor: pointer;
        }

        .nav-item:hover {
            background: #f8f9fa;
            border-left-color: #667eea;
        }

        .nav-item.active {
            background: #f8f9fa;
            border-left-color: #667eea;
            color: #667eea;
        }

        .nav-item a {
            text-decoration: none;
            color: #333;
            display: block;
            font-weight: 500;
        }

        .main-content {
            margin-left: 250px;
            padding: 2rem;
            min-height: calc(100vh - 70px);
        }

        .dashboard-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .card h3 {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .card .number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .card.sales { border-top: 4px solid #2ecc71; }
        .card.inventory { border-top: 4px solid #3498db; }
        .card.clients { border-top: 4px solid #e74c3c; }
        .card.alerts { border-top: 4px solid #f39c12; }

        .recent-activity {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .recent-activity h2 {
            margin-bottom: 1rem;
            color: #333;
        }

        .activity-list {
            list-style: none;
        }

        .activity-item {
            padding: 0.8rem 0;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
        }

        .activity-item:last-child {
            border-bottom: none;
        }

        @media (max-width: 768px) {
            .nav-sidebar {
                width: 100%;
                height: auto;
                position: static;
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .dashboard-cards {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Dashboard</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="nav-sidebar">
        <ul class="nav-menu">
            <li class="nav-item active"><a href="index.html">Dashboard</a></li>
            <li class="nav-item"><a href="gestion_inventario.html">Gestión de Inventario</a></li>
            <li class="nav-item"><a href="consulta_inventario.html">Consulta de Inventario</a></li>
            <li class="nav-item"><a href="registro_ventas.html">Registro de Ventas</a></li>
            <li class="nav-item"><a href="historial_ventas.html">Historial de Ventas</a></li>
            <li class="nav-item"><a href="registro_clientes.html">Registro de Clientes</a></li>
            <li class="nav-item"><a href="seguimiento_clientes.html">Seguimiento de Clientes</a></li>
            <li class="nav-item"><a href="dashboard.html">Reportes y Gráficos</a></li>
            <li class="nav-item"><a href="gestion_usuarios.html">Gestión de Usuarios</a></li>
        </ul>
    </div>

    <div class="main-content">
        <div class="dashboard-cards">
            <div class="card sales">
                <h3>Ventas del Mes</h3>
                <div class="number" id="ventasMes">$0</div>
            </div>
            <div class="card inventory">
                <h3>Productos en Inventario</h3>
                <div class="number" id="totalProductos">0</div>
            </div>
            <div class="card clients">
                <h3>Clientes Registrados</h3>
                <div class="number" id="totalClientes">0</div>
            </div>
            <div class="card alerts">
                <h3>Alertas de Stock</h3>
                <div class="number" id="alertasStock">0</div>
            </div>
        </div>

        <div class="recent-activity">
            <h2>Actividad Reciente</h2>
            <ul class="activity-list" id="activityList">
                <!-- La actividad se cargará dinámicamente -->
            </ul>
        </div>
    </div>

    <script>
        // Verificar sesión al cargar la página
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        // Cargar datos del dashboard
        async function loadDashboardData() {
            try {
                // Cargar ventas
                const ventasResponse = await fetch('http://localhost:3000/api/ventas');
                const ventas = await ventasResponse.json();
                
                // Calcular ventas del mes actual
                const mesActual = new Date().getMonth();
                const ventasMes = ventas.filter(v => new Date(v.fecha).getMonth() === mesActual)
                                      .reduce((sum, v) => sum + v.total, 0);
                
                document.getElementById('ventasMes').textContent = `$${ventasMes.toLocaleString()}`;
                document.getElementById('totalClientes').textContent = ventas.length;

                // Cargar inventario
                const inventarioResponse = await fetch('http://localhost:3000/api/inventario');
                const inventario = await inventarioResponse.json();
                
                document.getElementById('totalProductos').textContent = inventario.length;
                
                // Contar alertas de stock
                const alertas = inventario.filter(item => item.cantidad <= item.stock_minimo).length;
                document.getElementById('alertasStock').textContent = alertas;

                // Cargar actividad reciente (últimas 5 ventas)
                const actividadReciente = ventas.slice(0, 5);
                const activityList = document.getElementById('activityList');
                activityList.innerHTML = actividadReciente.map(venta => `
                    <li class="activity-item">
                        <span>Venta #${venta.id} - ${venta.cliente_nombre}</span>
                        <span>$${venta.total.toLocaleString()}</span>
                    </li>
                `).join('');

            } catch (error) {
                console.error('Error cargando datos del dashboard:', error);
            }
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos cuando la página esté lista
        document.addEventListener('DOMContentLoaded', loadDashboardData);
    </script>
</body>
</html>
------------------------------------
login.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Iniciar Sesión</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .login-container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h1 {
            color: #333;
            font-size: 24px;
            margin-bottom: 5px;
        }

        .logo p {
            color: #666;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .error {
            color: #e74c3c;
            text-align: center;
            margin-top: 10px;
            font-size: 14px;
        }

        .demo-accounts {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
            font-size: 12px;
        }

        .demo-accounts h3 {
            margin-bottom: 10px;
            color: #333;
        }

        .demo-account {
            margin-bottom: 5px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <h1>SysGestor</h1>
            <p>Sistema de Gestión Compustar</p>
        </div>
        
        <form id="loginForm">
            <div class="form-group">
                <label for="usuario">Usuario:</label>
                <input type="text" id="usuario" name="usuario" required>
            </div>
            
            <div class="form-group">
                <label for="password">Contraseña:</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <button type="submit" class="btn">Iniciar Sesión</button>
            <div id="errorMessage" class="error"></div>
        </form>

        <div class="demo-accounts">
            <h3>Cuentas de demostración:</h3>
            <div class="demo-account"><strong>Admin:</strong> admin / admin123</div>
            <div class="demo-account"><strong>Ventas:</strong> ventas / ventas123</div>
            <div class="demo-account"><strong>Inventario:</strong> inventario / inv123</div>
        </div>
    </div>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const usuario = document.getElementById('usuario').value;
            const password = document.getElementById('password').value;
            const errorMessage = document.getElementById('errorMessage');
            
            try {
                const response = await fetch('http://localhost:3000/api/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ usuario, password })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Guardar información de sesión
                    localStorage.setItem('usuario', JSON.stringify(data.usuario));
                    window.location.href = 'index.html';
                } else {
                    errorMessage.textContent = data.error || 'Credenciales incorrectas';
                }
            } catch (error) {
                errorMessage.textContent = 'Error de conexión con el servidor';
            }
        });
    </script>
</body>
</html>
------------------------------------
registro_clientes.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Registro de Clientes</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .form-section, .list-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-edit, .btn-delete {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .btn-edit {
            background: #3498db;
            color: white;
        }

        .btn-delete {
            background: #e74c3c;
            color: white;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Registro de Clientes</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Gestión de Clientes</h1>

        <div class="form-section">
            <h2>Registrar Nuevo Cliente</h2>
            <form id="clientForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="nombre">Nombre/Razón Social:</label>
                        <input type="text" id="nombre" name="nombre" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="telefono">Teléfono:</label>
                        <input type="tel" id="telefono" name="telefono" required>
                    </div>
                    <div class="form-group">
                        <label for="direccion">Dirección:</label>
                        <input type="text" id="direccion" name="direccion" required>
                    </div>
                </div>
                <button type="submit" class="btn">Registrar Cliente</button>
            </form>
        </div>

        <div class="list-section">
            <h2>Clientes Registrados</h2>
            <table id="clientsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th>Fecha Registro</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="clientsBody">
                    <!-- Los clientes se cargarán dinámicamente -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        // Cargar clientes
        async function loadClients() {
            try {
                const response = await fetch('http://localhost:3000/api/clientes');
                const clients = await response.json();
                
                const tbody = document.getElementById('clientsBody');
                tbody.innerHTML = clients.map(client => `
                    <tr>
                        <td>${client.id}</td>
                        <td>${client.nombre}</td>
                        <td>${client.email}</td>
                        <td>${client.telefono}</td>
                        <td>${client.direccion}</td>
                        <td>${new Date(client.fecha_registro).toLocaleDateString()}</td>
                        <td class="actions">
                            <button class="btn-edit" onclick="editClient(${client.id})">Editar</button>
                            <button class="btn-delete" onclick="deleteClient(${client.id})">Eliminar</button>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error cargando clientes:', error);
            }
        }

        // Registrar nuevo cliente
        document.getElementById('clientForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const clientData = {
                nombre: formData.get('nombre'),
                email: formData.get('email'),
                telefono: formData.get('telefono'),
                direccion: formData.get('direccion')
            };

            try {
                const response = await fetch('http://localhost:3000/api/clientes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(clientData)
                });

                const result = await response.json();
                
                if (result.success) {
                    alert('Cliente registrado exitosamente');
                    this.reset();
                    loadClients();
                } else {
                    alert('Error al registrar cliente: ' + result.error);
                }
            } catch (error) {
                alert('Error de conexión');
            }
        });

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        function editClient(id) {
            alert('Editar cliente ' + id + ' - Funcionalidad en desarrollo');
        }

        function deleteClient(id) {
            if (confirm('¿Estás seguro de eliminar este cliente?')) {
                alert('Eliminar cliente ' + id + ' - Funcionalidad en desarrollo');
            }
        }

        // Cargar clientes al iniciar
        document.addEventListener('DOMContentLoaded', loadClients);
    </script>
</body>
</html>
------------------------------------
registro_ventas.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Registro de Ventas</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .sale-form {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        input, select {
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-success {
            background: #28a745;
        }

        .products-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .product-card {
            border: 2px solid #ddd;
            border-radius: 5px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .product-card:hover {
            border-color: #667eea;
            background: #f8f9fa;
        }

        .product-card.selected {
            border-color: #28a745;
            background: #d4edda;
        }

        .product-name {
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .product-price {
            color: #28a745;
            font-weight: bold;
        }

        .product-stock {
            color: #666;
            font-size: 0.9rem;
        }

        .cart-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 5px, 15px, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .quantity-btn {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 3px;
            width: 30px;
            height: 30px;
            cursor: pointer;
        }

        .total-section {
            text-align: right;
            margin-top: 1rem;
            font-size: 1.2rem;
            font-weight: bold;
        }

        .out-of-stock {
            color: #dc3545;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Registro de Ventas</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Registro de Nueva Venta</h1>

        <div class="sale-form">
            <h2>Información de la Venta</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label for="cliente">Cliente:</label>
                    <select id="cliente" required>
                        <option value="">Seleccionar cliente</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="fecha">Fecha:</label>
                    <input type="date" id="fecha" value="<?php echo date('Y-m-d'); ?>" required>
                </div>
            </div>
        </div>

        <div class="products-section">
            <h2>Seleccionar Productos</h2>
            <div class="product-grid" id="productsGrid">
                <!-- Los productos se cargarán dinámicamente -->
            </div>
        </div>

        <div class="cart-section">
            <h2>Carrito de Venta</h2>
            <table id="cartTable">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Precio Unitario</th>
                        <th>Cantidad</th>
                        <th>Subtotal</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="cartBody">
                    <!-- Los productos del carrito se cargarán dinámicamente -->
                </tbody>
            </table>
            <div class="total-section">
                Total: $<span id="totalAmount">0.00</span>
            </div>
            <button class="btn btn-success" onclick="processSale()">Procesar Venta</button>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        let products = [];
        let clients = [];
        let cart = [];

        // Cargar datos iniciales
        async function loadInitialData() {
            await loadProducts();
            await loadClients();
        }

        // Cargar productos
        async function loadProducts() {
            try {
                const response = await fetch('http://localhost:3000/api/inventario');
                products = await response.json();
                displayProducts();
            } catch (error) {
                console.error('Error cargando productos:', error);
            }
        }

        // Cargar clientes
        async function loadClients() {
            try {
                const response = await fetch('http://localhost:3000/api/clientes');
                clients = await response.json();
                const clienteSelect = document.getElementById('cliente');
                clienteSelect.innerHTML = '<option value="">Seleccionar cliente</option>' +
                    clients.map(client => 
                        `<option value="${client.id}">${client.nombre}</option>`
                    ).join('');
            } catch (error) {
                console.error('Error cargando clientes:', error);
            }
        }

        // Mostrar productos disponibles
        function displayProducts() {
            const productsGrid = document.getElementById('productsGrid');
            productsGrid.innerHTML = products.map(product => {
                const outOfStock = product.cantidad === 0;
                return `
                    <div class="product-card ${outOfStock ? 'out-of-stock' : ''}" 
                         onclick="${outOfStock ? '' : `addToCart(${product.producto_id})`}">
                        <div class="product-name">${product.nombre}</div>
                        <div class="product-price">$${product.precio_venta?.toLocaleString() || 'N/A'}</div>
                        <div class="product-stock">
                            ${outOfStock ? '<span class="out-of-stock">Sin stock</span>' : `Stock: ${product.cantidad}`}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Agregar producto al carrito
        function addToCart(productId) {
            const product = products.find(p => p.producto_id === productId);
            if (!product) return;

            const existingItem = cart.find(item => item.producto_id === productId);
            
            if (existingItem) {
                if (existingItem.cantidad < product.cantidad) {
                    existingItem.cantidad++;
                } else {
                    alert('No hay suficiente stock disponible');
                    return;
                }
            } else {
                cart.push({
                    producto_id: productId,
                    nombre: product.nombre,
                    precio: product.precio_venta || 0,
                    cantidad: 1,
                    stock_disponible: product.cantidad
                });
            }

            updateCart();
        }

        // Actualizar carrito
        function updateCart() {
            const cartBody = document.getElementById('cartBody');
            const totalAmount = document.getElementById('totalAmount');
            
            cartBody.innerHTML = cart.map((item, index) => `
                <tr>
                    <td>${item.nombre}</td>
                    <td>$${item.precio.toLocaleString()}</td>
                    <td class="quantity-controls">
                        <button class="quantity-btn" onclick="updateQuantity(${index}, -1)">-</button>
                        ${item.cantidad}
                        <button class="quantity-btn" onclick="updateQuantity(${index}, 1)">+</button>
                    </td>
                    <td>$${(item.precio * item.cantidad).toLocaleString()}</td>
                    <td>
                        <button class="btn btn-secondary" onclick="removeFromCart(${index})">Eliminar</button>
                    </td>
                </tr>
            `).join('');

            const total = cart.reduce((sum, item) => sum + (item.precio * item.cantidad), 0);
            totalAmount.textContent = total.toLocaleString('es-MX', { minimumFractionDigits: 2 });
        }

        // Actualizar cantidad
        function updateQuantity(index, change) {
            const item = cart[index];
            const newQuantity = item.cantidad + change;
            
            if (newQuantity < 1) {
                removeFromCart(index);
                return;
            }
            
            if (newQuantity > item.stock_disponible) {
                alert('No hay suficiente stock disponible');
                return;
            }
            
            item.cantidad = newQuantity;
            updateCart();
        }

        // Eliminar del carrito
        function removeFromCart(index) {
            cart.splice(index, 1);
            updateCart();
        }

        // Procesar venta
        async function processSale() {
            const clienteId = document.getElementById('cliente').value;
            
            if (!clienteId) {
                alert('Por favor selecciona un cliente');
                return;
            }
            
            if (cart.length === 0) {
                alert('El carrito está vacío');
                return;
            }

            const saleData = {
                cliente_id: parseInt(clienteId),
                productos: cart.map(item => ({
                    producto_id: item.producto_id,
                    cantidad: item.cantidad,
                    precio: item.precio
                })),
                total: cart.reduce((sum, item) => sum + (item.precio * item.cantidad), 0)
            };

            try {
                const response = await fetch('http://localhost:3000/api/ventas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(saleData)
                });

                const result = await response.json();
                
                if (result.success) {
                    alert('Venta registrada exitosamente');
                    cart = [];
                    updateCart();
                    document.getElementById('cliente').value = '';
                    await loadProducts(); // Recargar productos para actualizar stock
                } else {
                    alert('Error al registrar venta: ' + result.error);
                }
            } catch (error) {
                alert('Error de conexión al procesar la venta');
            }
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos al iniciar
        document.addEventListener('DOMContentLoaded', loadInitialData);
    </script>
</body>
</html>
------------------------------------
reportes_graficos.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Reportes Detallados</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .reports-tabs {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .tabs-header {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .tab {
            padding: 1rem 2rem;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }

        .tab.active {
            border-bottom-color: #667eea;
            background: white;
            color: #667eea;
            font-weight: bold;
        }

        .tab-content {
            padding: 2rem;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .chart-container {
            height: 400px;
            margin-bottom: 2rem;
        }

        .report-actions {
            margin-bottom: 1rem;
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-secondary {
            background: #6c757d;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .table th, .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .kpi-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .kpi-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .kpi-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }

        .kpi-label {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Reportes Detallados</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Reportes Analíticos y Gráficos</h1>

        <div class="reports-tabs">
            <div class="tabs-header">
                <div class="tab active" onclick="switchTab('sales')">Ventas</div>
                <div class="tab" onclick="switchTab('inventory')">Inventario</div>
                <div class="tab" onclick="switchTab('clients')">Clientes</div>
                <div class="tab" onclick="switchTab('financial')">Financiero</div>
            </div>

            <!-- Pestaña de Ventas -->
            <div id="sales-tab" class="tab-content active">
                <div class="report-actions">
                    <button class="btn" onclick="exportSalesReport()">Exportar Reporte</button>
                    <button class="btn btn-secondary" onclick="printSalesReport()">Imprimir</button>
                </div>

                <div class="kpi-cards">
                    <div class="kpi-card">
                        <div class="kpi-value" id="totalSales">0</div>
                        <div class="kpi-label">Ventas Totales</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="monthlyRevenue">$0</div>
                        <div class="kpi-label">Ingresos Mensuales</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="avgTicket">$0</div>
                        <div class="kpi-label">Ticket Promedio</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="growthRate">0%</div>
                        <div class="kpi-label">Crecimiento</div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="salesTrendChart"></canvas>
                </div>

                <h3>Productos Más Vendidos</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Unidades Vendidas</th>
                            <th>Ingresos</th>
                            <th>% del Total</th>
                        </tr>
                    </thead>
                    <tbody id="topProductsBody">
                        <!-- Los productos se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>

            <!-- Pestaña de Inventario -->
            <div id="inventory-tab" class="tab-content">
                <div class="kpi-cards">
                    <div class="kpi-card">
                        <div class="kpi-value" id="totalProducts">0</div>
                        <div class="kpi-label">Total Productos</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="inventoryValue">$0</div>
                        <div class="kpi-label">Valor Inventario</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="lowStockItems">0</div>
                        <div class="kpi-label">Stock Bajo</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="outOfStock">0</div>
                        <div class="kpi-label">Sin Stock</div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="inventoryStatusChart"></canvas>
                </div>

                <h3>Productos con Stock Bajo</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Stock Actual</th>
                            <th>Stock Mínimo</th>
                            <th>Diferencia</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody id="lowStockBody">
                        <!-- Los productos con stock bajo se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>

            <!-- Pestaña de Clientes -->
            <div id="clients-tab" class="tab-content">
                <div class="kpi-cards">
                    <div class="kpi-card">
                        <div class="kpi-value" id="totalClients">0</div>
                        <div class="kpi-label">Total Clientes</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="activeClients">0</div>
                        <div class="kpi-label">Clientes Activos</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="newClients">0</div>
                        <div class="kpi-label">Nuevos este Mes</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="retentionRate">0%</div>
                        <div class="kpi-label">Tasa Retención</div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="clientsChart"></canvas>
                </div>

                <h3>Mejores Clientes</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Total Compras</th>
                            <th>Valor Total</th>
                            <th>Última Compra</th>
                        </tr>
                    </thead>
                    <tbody id="topClientsBody">
                        <!-- Los mejores clientes se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>

            <!-- Pestaña Financiera -->
            <div id="financial-tab" class="tab-content">
                <div class="kpi-cards">
                    <div class="kpi-card">
                        <div class="kpi-value" id="grossRevenue">$0</div>
                        <div class="kpi-label">Ingresos Brutos</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="netProfit">$0</div>
                        <div class="kpi-label">Utilidad Neta</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="profitMargin">0%</div>
                        <div class="kpi-label">Margen Utilidad</div>
                    </div>
                    <div class="kpi-card">
                        <div class="kpi-value" id="roi">0%</div>
                        <div class="kpi-label">ROI</div>
                    </div>
                </div>

                <div class="chart-container">
                    <canvas id="financialChart"></canvas>
                </div>

                <h3>Análisis de Rentabilidad por Producto</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Ingresos</th>
                            <th>Costo</th>
                            <th>Utilidad</th>
                            <th>Margen</th>
                        </tr>
                    </thead>
                    <tbody id="profitabilityBody">
                        <!-- Los datos de rentabilidad se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        // Cambiar pestañas
        function switchTab(tabName) {
            // Ocultar todas las pestañas
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Mostrar pestaña seleccionada
            document.getElementById(tabName + '-tab').classList.add('active');
            event.target.classList.add('active');

            // Cargar datos específicos de la pestaña
            loadTabData(tabName);
        }

        // Cargar datos de la pestaña
        function loadTabData(tabName) {
            switch(tabName) {
                case 'sales':
                    loadSalesData();
                    break;
                case 'inventory':
                    loadInventoryData();
                    break;
                case 'clients':
                    loadClientsData();
                    break;
                case 'financial':
                    loadFinancialData();
                    break;
            }
        }

        // Cargar datos de ventas
        async function loadSalesData() {
            try {
                const response = await fetch('http://localhost:3000/api/reportes/ventas');
                const data = await response.json();
                
                // Actualizar KPIs
                document.getElementById('totalSales').textContent = data.cantidadVentas || 0;
                document.getElementById('monthlyRevenue').textContent = `$${(data.totalVentas || 0).toLocaleString()}`;
                document.getElementById('avgTicket').textContent = `$${((data.totalVentas || 0) / (data.cantidadVentas || 1)).toLocaleString('es-MX', { minimumFractionDigits: 2 })}`;
                
                // Gráfico de tendencia de ventas
                updateSalesTrendChart(data.ventasPorMes || {});
                
            } catch (error) {
                console.error('Error cargando datos de ventas:', error);
            }
        }

        // Actualizar gráfico de tendencia de ventas
        function updateSalesTrendChart(salesByMonth) {
            const ctx = document.getElementById('salesTrendChart').getContext('2d');
            const months = Object.keys(salesByMonth);
            const amounts = Object.values(salesByMonth);

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Ventas Mensuales',
                        data: amounts,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Cargar datos de inventario
        async function loadInventoryData() {
            try {
                const response = await fetch('http://localhost:3000/api/reportes/inventario');
                const data = await response.json();
                
                // Actualizar KPIs
                document.getElementById('totalProducts').textContent = data.totalProductos || 0;
                document.getElementById('inventoryValue').textContent = `$${(data.valorTotalInventario || 0).toLocaleString()}`;
                document.getElementById('lowStockItems').textContent = data.productosBajoStock?.length || 0;
                
                // Gráfico de estado de inventario
                updateInventoryStatusChart(data);
                
            } catch (error) {
                console.error('Error cargando datos de inventario:', error);
            }
        }

        // Actualizar gráfico de estado de inventario
        function updateInventoryStatusChart(data) {
            const ctx = document.getElementById('inventoryStatusChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Stock Normal', 'Stock Bajo', 'Sin Stock'],
                    datasets: [{
                        label: 'Cantidad de Productos',
                        data: [
                            (data.totalProductos || 0) - (data.productosBajoStock?.length || 0),
                            data.productosBajoStock?.length || 0,
                            0 // Sin stock
                        ],
                        backgroundColor: [
                            '#2ecc71',
                            '#f39c12',
                            '#e74c3c'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Funciones de exportación e impresión (placeholders)
        function exportSalesReport() {
            alert('Funcionalidad de exportación en desarrollo');
        }

        function printSalesReport() {
            window.print();
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos iniciales de la pestaña activa
        document.addEventListener('DOMContentLoaded', () => {
            loadTabData('sales');
        });
    </script>
</body>
</html>
------------------------------------
seguimiento_clientes.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SysGestor - Seguimiento de Clientes</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f6fa;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logout-btn, .back-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-title {
            margin-bottom: 2rem;
            color: #333;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .clients-section {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .client-card {
            border: 2px solid #ddd;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s;
        }

        .client-card:hover {
            border-color: #667eea;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
        }

        .client-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .client-name {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
        }

        .client-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .info-item {
            display: flex;
            flex-direction: column;
        }

        .info-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.3rem;
        }

        .info-value {
            font-weight: 500;
            color: #333;
        }

        .sales-history {
            margin-top: 1rem;
        }

        .sales-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 0.5rem;
        }

        .sales-table th, .sales-table td {
            padding: 0.5rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .sales-table th {
            background: #f8f9fa;
            font-weight: 600;
        }

        .no-sales {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 1rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <h1>SysGestor - Seguimiento de Clientes</h1>
        </div>
        <div class="user-info">
            <span id="userName">Usuario</span>
            <a href="index.html" class="back-btn">Volver al Dashboard</a>
            <button class="logout-btn" onclick="logout()">Cerrar Sesión</button>
        </div>
    </div>

    <div class="main-content">
        <h1 class="page-title">Seguimiento y Análisis de Clientes</h1>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalClientes">0</div>
                <div class="stat-label">Total Clientes</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="clientesActivos">0</div>
                <div class="stat-label">Clientes Activos</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="ingresosClientes">$0</div>
                <div class="stat-label">Ingresos por Clientes</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="promedioCompra">$0</div>
                <div class="stat-label">Ticket Promedio</div>
            </div>
        </div>

        <div class="clients-section">
            <h2>Detalle de Clientes</h2>
            <div id="clientsContainer">
                <!-- Los clientes se cargarán dinámicamente -->
            </div>
        </div>
    </div>

    <script>
        // Verificar sesión
        const usuario = JSON.parse(localStorage.getItem('usuario'));
        if (!usuario) {
            window.location.href = 'login.html';
        } else {
            document.getElementById('userName').textContent = usuario.nombre;
        }

        let clientsData = [];
        let salesData = [];

        // Cargar datos iniciales
        async function loadInitialData() {
            await loadClients();
            await loadSales();
        }

        // Cargar clientes
        async function loadClients() {
            try {
                const response = await fetch('http://localhost:3000/api/clientes');
                clientsData = await response.json();
                displayClients();
                updateStats();
            } catch (error) {
                console.error('Error cargando clientes:', error);
            }
        }

        // Cargar ventas
        async function loadSales() {
            try {
                const response = await fetch('http://localhost:3000/api/ventas');
                salesData = await response.json();
                displayClients(); // Volver a mostrar clientes con datos de ventas actualizados
                updateStats();
            } catch (error) {
                console.error('Error cargando ventas:', error);
            }
        }

        function displayClients() {
            const clientsContainer = document.getElementById('clientsContainer');
            
            clientsContainer.innerHTML = clientsData.map(client => {
                const clientSales = salesData.filter(sale => sale.cliente_id === client.id);
                const totalSpent = clientSales.reduce((sum, sale) => sum + sale.total, 0);
                const salesCount = clientSales.length;
                const lastSale = clientSales.length > 0 ? 
                    new Date(Math.max(...clientSales.map(s => new Date(s.fecha)))) : null;

                return `
                    <div class="client-card">
                        <div class="client-header">
                            <div class="client-name">${client.nombre}</div>
                            <div style="color: #28a745; font-weight: bold;">
                                $${totalSpent.toLocaleString()}
                            </div>
                        </div>
                        
                        <div class="client-info">
                            <div class="info-item">
                                <span class="info-label">Email</span>
                                <span class="info-value">${client.email}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Teléfono</span>
                                <span class="info-value">${client.telefono}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Total Compras</span>
                                <span class="info-value">${salesCount}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Última Compra</span>
                                <span class="info-value">${lastSale ? lastSale.toLocaleDateString() : 'Sin compras'}</span>
                            </div>
                        </div>

                        ${salesCount > 0 ? `
                            <div class="sales-history">
                                <h4>Historial de Compras</h4>
                                <table class="sales-table">
                                    <thead>
                                        <tr>
                                            <th>Fecha</th>
                                            <th>ID Venta</th>
                                            <th>Total</th>
                                            <th>Productos</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${clientSales.map(sale => `
                                            <tr>
                                                <td>${new Date(sale.fecha).toLocaleDateString()}</td>
                                                <td>#${sale.id}</td>
                                                <td>$${sale.total.toLocaleString()}</td>
                                                <td>${sale.productos.length} productos</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        ` : '<div class="no-sales">Este cliente no ha realizado compras</div>'}
                    </div>
                `;
            }).join('');
        }

        function updateStats() {
            const totalClientes = clientsData.length;
            const clientesActivos = new Set(salesData.map(sale => sale.cliente_id)).size;
            const ingresosClientes = salesData.reduce((sum, sale) => sum + sale.total, 0);
            const promedioCompra = salesData.length > 0 ? ingresosClientes / salesData.length : 0;

            document.getElementById('totalClientes').textContent = totalClientes;
            document.getElementById('clientesActivos').textContent = clientesActivos;
            document.getElementById('ingresosClientes').textContent = `$${ingresosClientes.toLocaleString()}`;
            document.getElementById('promedioCompra').textContent = `$${promedioCompra.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`;
        }

        function logout() {
            localStorage.removeItem('usuario');
            window.location.href = 'login.html';
        }

        // Cargar datos al iniciar
        document.addEventListener('DOMContentLoaded', loadInitialData);
    </script>
</body>
</html>
------------------------------------
It_Dir_Fil.py

import os # Funciones del sistema operativo para manejo de archivos y directorios

# VARIABLES GLOBALES
codificaciones_txt = ['utf-8'] # Lista de codificaciones a probar para archivos de texto

# FUNCIONES
# Función recursiva que procesa archivos y subdirectorios y guarda en archivo
def guardar_contenido_archivos(ruta_dir, archivo_salida, codificaciones_txt, nivel=0):
    # Recorre todos los elementos en la carpeta actual
    for nombre_elemento in os.listdir(ruta_dir):
        # Construye la ruta completa del elemento
        ruta_completa = os.path.join(ruta_dir, nombre_elemento)
        
        # Verifica si es un archivo y no es el archivo de salida actual
        if os.path.isfile(ruta_completa) and ruta_completa != archivo_salida.name:
            for codificacion_iter in codificaciones_txt:
                try:
                    # Intenta abrir y leer el contenido del archivo como texto
                    with open(ruta_completa, 'r', encoding=codificacion_iter) as archivo:
                        contenido_val = archivo.read()
                        
                        # Si no hay excepción, escribe el nombre y el contenido del archivo
                        archivo_salida.write(f"{nombre_elemento}\n\n")
                        archivo_salida.write(contenido_val + "\n")
                        archivo_salida.write("------------------------------------\n")
                        
                        break
                except (UnicodeDecodeError, PermissionError, IOError):
                    # Si ocurre un error, simplemente continúa con la siguiente codificación
                    continue
        
        # Verifica si es un directorio
        elif os.path.isdir(ruta_completa):
            # Llamada recursiva para procesar el subdirectorio (sin escribir nombre del directorio)
            guardar_contenido_archivos(ruta_completa, archivo_salida, codificaciones_txt)

# Función recursiva que procesa archivos y subdirectorios
def procesar_archivos(ruta_dir, codificaciones_txt, nivel=0, archivo_salida_excluir=None):
    # Recorre todos los elementos en la carpeta actual
    for nombre_elemento in os.listdir(ruta_dir):
        # Construye la ruta completa del elemento
        ruta_completa = os.path.join(ruta_dir, nombre_elemento)
        
        # Verifica si es un archivo y no es el archivo de salida a excluir
        if os.path.isfile(ruta_completa) and (archivo_salida_excluir is None or ruta_completa != archivo_salida_excluir):
            for codificacion_iter in codificaciones_txt:
                try:
                    # Intenta abrir y leer el contenido del archivo como texto
                    with open(ruta_completa, 'r', encoding=codificacion_iter) as archivo:
                        contenido_val = archivo.read()
                        
                        # Si no hay excepción, imprime el nombre y el contenido del archivo
                        print(f"{nombre_elemento}\n")
                        print(contenido_val)
                        print("------------------------------------")
                        
                        break
                except (UnicodeDecodeError, PermissionError, IOError):
                    # Si ocurre un error, simplemente continúa con la siguiente codificación
                    continue
        
        # Verifica si es un directorio
        elif os.path.isdir(ruta_completa):
            # Llamada recursiva para procesar el subdirectorio (sin imprimir nombre del directorio)
            procesar_archivos(ruta_completa, codificaciones_txt, nivel + 1, archivo_salida_excluir)

# Función que guarda el árbol de directorios en un archivo
def guardar_arbol_directorios(ruta_dir, archivo_salida, prefijo="", nivel=0):
    # Obtiene la lista de elementos en el directorio
    elementos = os.listdir(ruta_dir)
    
    # Ordena los elementos: primero directorios, luego archivos
    elementos_ordenados = sorted(elementos, key=lambda x: (not os.path.isdir(os.path.join(ruta_dir, x)), x))
    
    # Recorre todos los elementos
    for i, nombre_elemento in enumerate(elementos_ordenados):
        # Construye la ruta completa
        ruta_completa = os.path.join(ruta_dir, nombre_elemento)
        
        # Determina el prefijo apropiado según si es el último elemento
        es_ultimo = i == len(elementos_ordenados) - 1
        prefijo_actual = "└── " if es_ultimo else "├── "
        
        # Escribe el nombre del elemento en el archivo
        archivo_salida.write(prefijo + prefijo_actual + nombre_elemento + "\n")
        
        # Si es un directorio, procesa recursivamente
        if os.path.isdir(ruta_completa):
            # Construye el nuevo prefijo para los subelementos
            nuevo_prefijo = prefijo + ("    " if es_ultimo else "│   ")
            guardar_arbol_directorios(ruta_completa, archivo_salida, nuevo_prefijo, nivel + 1)

# Función recursiva que muestra el árbol de directorios
def mostrar_arbol_directorios(ruta_dir, prefijo="", nivel=0):
    # Obtiene la lista de elementos en el directorio
    elementos = os.listdir(ruta_dir)
    
    # Ordena los elementos: primero directorios, luego archivos
    elementos_ordenados = sorted(elementos, key=lambda x: (not os.path.isdir(os.path.join(ruta_dir, x)), x))
    
    # Recorre todos los elementos
    for i, nombre_elemento in enumerate(elementos_ordenados):
        # Construye la ruta completa
        ruta_completa = os.path.join(ruta_dir, nombre_elemento)
        
        # Determina el prefijo apropiado según si es el último elemento
        es_ultimo = i == len(elementos_ordenados) - 1
        prefijo_actual = "└── " if es_ultimo else "├── "
        
        # Imprime el nombre del elemento
        print(prefijo + prefijo_actual + nombre_elemento)
        
        # Si es un directorio, procesa recursivamente
        if os.path.isdir(ruta_completa):
            # Construye el nuevo prefijo para los subelementos
            nuevo_prefijo = prefijo + ("    " if es_ultimo else "│   ")
            mostrar_arbol_directorios(ruta_completa, nuevo_prefijo, nivel + 1)

# PUNTO DE PARTIDA
# Obtiene el directorio actual donde se encuentra el script
ruta_dir = os.path.dirname(os.path.abspath(__file__))
nombre_carpeta = os.path.basename(ruta_dir)

# Crea el archivo de salida con el nombre de la carpeta
ruta_archivo_salida = os.path.join(ruta_dir, f"{nombre_carpeta}.txt")

# Abre el archivo de salida en modo escritura
with open(ruta_archivo_salida, 'w', encoding='utf-8') as archivo_salida:
    # Escribe el nombre de la carpeta actual
    archivo_salida.write(nombre_carpeta + "\n")
    
    # Guarda el árbol de directorios
    guardar_arbol_directorios(ruta_dir, archivo_salida)
    
    # Escribe el separador
    archivo_salida.write("------------------------------------\n")
    
    # Procesa los archivos y guarda su contenido (excluyendo el archivo de salida actual)
    guardar_contenido_archivos(ruta_dir, archivo_salida, codificaciones_txt)
------------------------------------
SysGestor.bat

@echo off
echo Iniciando SysGestor...
start http://localhost:3000
echo Si el servidor no está ejecutándose, abre una terminal en la carpeta backend y ejecuta: node server.js
pause
------------------------------------
